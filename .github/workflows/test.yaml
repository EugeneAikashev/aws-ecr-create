name: test
on:
  workflow_dispatch:
    inputs:
      productName:
        type: choice
        description: 'Product Name'
        required: true
        options:
        - airslate
        - pdffiller
        - signnow
      serviceName:
        description: 'Service name'
        required: true
      envName:
        type: choice
        description: 'Environment'
        required: true
        options:
        - dev+prod
        - dev
        - prod
jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    env:
      REPO_NAME: "EugeneAikashev/aws-ecr-infra"
      PRODUCT: ${{ github.event.inputs.productName }}
      SERVICE: ${{ github.event.inputs.serviceName }}
      ENV_NAME: ${{ github.event.inputs.envName }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPO_NAME }}

    - name: Templating
      id: templating
      env:
        REPO_PATH_TEMPLATE: "infra/PLACEHOLDER_ENV/ecr/${{ env.PRODUCT }}/${{ env.SERVICE }}"
      run: |
        set -euo pipefail

        if [[ "${SERVICE}" =~ [^a-z0-9\-] ]]; then
          echo "Service name is invalid. Only lowercase alphanum and dash are allowed!"
          exit 1
        fi

        # Split ENV_NAME to array. Delimeter is "+"
        arrEnv=(${ENV_NAME//+/ })

        for curEnv in "${arrEnv[@]}"; do
          echo "Current env is: $curEnv"

          REPO_PATH=${REPO_PATH_TEMPLATE/PLACEHOLDER_ENV/$curEnv}
          echo "Current path is: ${REPO_PATH}"

          if [[ -d "${REPO_PATH}" ]]; then
            echo "${REPO_PATH} is already exist!"
            exit 1
          fi

          mkdir -p "${REPO_PATH}"
          cp -rTv template/ecr/ "${REPO_PATH}"
          sed -i "s/PLACEHOLDER_PRODUCT/${PRODUCT}/g" "${REPO_PATH}/settings.tfvars"
          sed -i "s/PLACEHOLDER_SERVICE/${SERVICE}/g" "${REPO_PATH}/settings.tfvars"

        done

        # Set REPO_PATH for next step
        if [[ ${#arrEnv[@]} -eq 1 ]]; then
          REPO_PATH=${REPO_PATH_TEMPLATE/PLACEHOLDER_ENV/$ENV_NAME}
        else
          # Replace "dev+prod" to "{dev,prod}"
          strEnv="{${ENV_NAME/+/,}}"
          REPO_PATH=${REPO_PATH_TEMPLATE/PLACEHOLDER_ENV/$strEnv}
        fi

        #echo "$REPO_PATH"
        #echo "action_state=yellow" >> $GITHUB_ENV
        # set output
        echo "::set-output name=REPO_PATH::$REPO_PATH"

    - name: step after template
      run: echo "${{ steps.templating.outputs.REPO_PATH }}"

    - name: Disable workflow commands
      run: |
        echo '::warning:: This is a warning message, to demonstrate that commands are being processed.'
        stopMarker=$(uuidgen)
        echo "::stop-commands::$stopMarker"
        echo '::warning:: This will NOT be rendered as a warning, because stop-commands has been invoked.'
        echo "::$stopMarker::"
        echo '::warning:: This is a warning again, because stop-commands has been turned off.'
