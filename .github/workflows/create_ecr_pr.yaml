name: Create ECR Pull Request
env:
  REPO_NAME: "EugeneAikashev/aws-ecr-infra"
on:
  workflow_dispatch:
    inputs:
      productName:
        type: choice
        description: 'Product Name'
        required: true
        options:
        - airslate
      serviceName:
        description: 'Service name'
        required: true
      envName:
        type: choice
        description: 'Environment'
        required: true
        options:
        - dev+prod
        - dev
        - prod
      regionName:
        type: choice
        description: 'Region'
        required: true
        options:
          - us-east-1
          - eu-central-1
          - ap-southeast-2
jobs:
  create-ecr-pr:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    env:
      PRODUCT: ${{ github.event.inputs.productName }}
      SERVICE: ${{ github.event.inputs.serviceName }}
      ENV_NAME: ${{ github.event.inputs.envName }}
      REGION: ${{ github.event.inputs.regionName }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPO_NAME }}

    - name: Check service name
      run: |
        set -euo pipefail

        if [[ "${SERVICE}" =~ [^a-z0-9\-] ]]; then
          echo "::error::Service name is invalid. Only lowercase alphanum and dash are allowed!"
          exit 1
        else
          echo "Service name is ok!"
        fi

    - name: Check region
      env:
        REGION_PATH_TEMPLATE: "common-infra-PLACEHOLDER_ENV/${{ env.REGION }}"
      run: |
        set -euo pipefail

        # loop over $ENV_NAME: "dev", "prod" or "dev+prod"
        for curEnv in ${ENV_NAME//+/ }; do
          echo "Current env is: $curEnv"

          REGION_PATH=${REGION_PATH_TEMPLATE/PLACEHOLDER_ENV/$curEnv}
          echo "Current region path is: ${REGION_PATH}"

          if ! [[ -d "${REGION_PATH}" ]]; then
            echo "::error::${REGION_PATH} does not exist!"
            exit 1
          else
            echo "Region path is ok!"
          fi

        done

    - name: Check settings
      env:
        SETTINGS: "templates/ecr/settings_${{ env.PRODUCT}}_${{ env.ENV_NAME}}.tfvars"
      run: |
        set -euo pipefail

        if [[ -f "${SETTINGS}" ]]; then
          echo "::error::${SETTINGS} does not exist!"
          exit 1
        else
          echo "Settings is ok!"
        fi

    - name: Templating
      id: templating
      env:
        REPO_PATH_TEMPLATE: "common-infra-PLACEHOLDER_ENV/${{ env.REGION }}/02-base-infra/ecr/${{ env.PRODUCT }}/${{ env.SERVICE }}"
      run: |
        set -euo pipefail

        # Split ENV_NAME to array. Delimeter is "+"
        arrEnv=(${ENV_NAME//+/ })

        for curEnv in "${arrEnv[@]}"; do
          echo "Current env is: $curEnv"

          REPO_PATH=${REPO_PATH_TEMPLATE/PLACEHOLDER_ENV/$curEnv}
          echo "Current path is: ${REPO_PATH}"

          if [[ -d "${REPO_PATH}" ]]; then
            echo "::error::${REPO_PATH} is already exist!"
            exit 1
          fi

          mkdir -p "${REPO_PATH}"
          cp -rTv templates/ecr/ "${REPO_PATH}"
          mv "${REPO_PATH}/settings_$PRODUCT_$curEnv.tfvars"  "${REPO_PATH}/settings.tfvars"
          rm "${REPO_PATH}"/settings_*

          sed -i "s|PLACEHOLDER_PRODUCT|${PRODUCT}|g" "${REPO_PATH}/settings.tfvars"
          sed -i "s|PLACEHOLDER_SERVICE|${SERVICE}|g" "${REPO_PATH}/settings.tfvars"
          sed -i "s|PLACEHOLDER_MAINTAINER|${{ github.actor }}|g" "${REPO_PATH}/settings.tfvars"
          sed -i "s|PLACEHOLDER_RFC|Automated by [${{ github.workflow }}]:${{ github.run_number}} from ${{ github.repository }}|g" "${REPO_PATH}/settings.tfvars"

        done

        # Set REPO_PATH for the next steps
        if [[ ${#arrEnv[@]} -eq 1 ]]; then
          REPO_PATH=${REPO_PATH_TEMPLATE/PLACEHOLDER_ENV/$ENV_NAME}
        else
          # Replace "dev+prod" to "{dev,prod}"
          strEnv="{${ENV_NAME/+/,}}"
          REPO_PATH=${REPO_PATH_TEMPLATE/PLACEHOLDER_ENV/$strEnv}
        fi

        # set output
        echo "::set-output name=REPO_PATH::$REPO_PATH"

      # Mode details: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#authenticating-with-github-app-generated-tokens
    - name: Generate token
      uses: tibdex/github-app-token@v1
      id: generate-token
      with:
        app_id: ${{ secrets.EUGENEAPP_APP_ID }}
        private_key: ${{ secrets.EUGENEAPP_APP_PRIVATE_KEY }}

    - name: Create PR
      uses: peter-evans/create-pull-request@v4
      env:
        REPO_PATH: ${{ steps.templating.outputs.REPO_PATH }}
      with:
        token: ${{ steps.generate-token.outputs.token }}
        branch: ${{ env.REPO_PATH }}
        delete-branch: true
        title: "Add ${{ env.REPO_PATH }}"
        commit-message: "[Add ${{ env.REPO_PATH }}] automated change"
        assignees: ${{ github.actor }}
        body: |
            Update report
            - Add ${{ env.REPO_PATH }}
            - Auto-generated by github action [${{ github.workflow }}]
        labels: |
          ECR
          AWS
          bot
          ${{ env.ENV_NAME }}
          ${{ github.workflow }}
